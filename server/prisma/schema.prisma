generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma schema

model User {
  userId          String           @id @default(uuid()) // Change uuid() to auto() for the primary key
  email           String           @unique
  userName        String           @unique
  password        String
  userStatus      UserStatus       @default(ACTIVE)
  createdAt       DateTime         @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(0)
  role            UserRoles
  tenant          Tenant?
  propertyOwner   PropertyOwner?
  serviceProvider ServiceProvider?
  SavedItem       SavedItem[]

  @@map("users")
}

model PropertyOwner {
  propertyOwnerId     String               @id @default(uuid())
  firstName           String
  lastName            String
  phoneNumber         String?
  profileImage        String?
  createdAt           DateTime             @default(now()) @db.Timestamptz(0)
  updatedAt           DateTime             @updatedAt @db.Timestamptz(0)
  userId              String               @unique
  user                User                 @relation(fields: [userId], references: [userId])
  Property            Property[]
  maintenanceRequests MaintenanceRequest[]

  @@map("propertyOwners")
}

model Tenant {
  tenantId                             String               @id @default(uuid()) // Change uuid() to auto() for the primary key
  userId                               String               @unique
  // personal information
  firstName                            String
  lastName                             String
  profileImage                         String?
  dateOfBirth                          DateTime?
  socialSecurityNumber                 String?
  presentAddress                       String?
  phoneNumber                          String?
  drivingLicenseNumber                 String?
  isCriminalRecord                     Boolean?
  criminalRecordDescription            String?
  // rental history
  prevLandlordName                     String?
  prevLandlordContactInfo              String?
  lengthOfPrevTenancy                  String?
  affordableRentAmount                 Int?
  leavingReason                        String?
  isAnyLatePaymentReason               String?
  // income information
  CurrentEmployerOrBusinessName        String?
  CurrentEmployerOrBusinessContactInfo String?
  JobTitle                             String?
  AnnualSalary                         Int?
  OtherIncomeSource                    String?
  CurrentCreditScore                   Int?
  // pets
  isPets                               Boolean?
  typeOfPets                           String?
  isPetVaccinated                      Boolean?
  // other information
  isSmoker                             Boolean?
  allergies                            String?
  isHaveOtherMember                    Boolean?
  numberOfMember                       Int?
  isWillingToSignLeasingAgreement      Boolean?
  isAnyExtraToMention                  String?
  // 
  createdAt                            DateTime             @default(now()) @db.Timestamptz(0)
  updatedAt                            DateTime             @updatedAt @db.Timestamptz(0)
  user                                 User                 @relation(fields: [userId], references: [userId])
  SavedItem                            SavedItem[]
  // assigned in property
  propertyId                           String?              @unique
  property                             Property?            @relation(fields: [propertyId], references: [propertyId])
  maintenanceRequests                  MaintenanceRequest[]

  @@map("tenants")
}

model ServiceProvider {
  serviceProviderId   String              @id @default(uuid())
  firstName           String
  lastName            String
  profileImage        String?
  phoneNumber         String?
  companyName         String?
  companyAddress      String?
  companyPhoneNumber  String?
  companyEmailAddress String?
  userId              String              @unique
  createdAt           DateTime            @default(now()) @db.Timestamptz(0)
  updatedAt           DateTime            @updatedAt @db.Timestamptz(0)
  user                User                @relation(fields: [userId], references: [userId])
  Service             Service?
  SavedItem           SavedItem[]
  maintenanceRequest  MaintenanceRequest?

  @@map("serviceProviders")
}

model Property {
  propertyId               String               @id @default(uuid())
  owner                    PropertyOwner        @relation(fields: [ownerId], references: [propertyOwnerId])
  ownerId                  String
  title                    String               @default("Property Title")
  numOfBed                 Int                  @default(1)
  numOfBath                Int                  @default(1)
  monthlyRent              Int                  @default(1)
  address                  String
  description              String
  maintenanceCoveredTenant String
  maintenanceCoveredOwner  String
  schools                  String
  universities             String
  allowedPets              String
  images                   String[]
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  SavedItem                SavedItem[]
  Tenant                   Tenant?
  isRented                 Boolean              @default(false)
  orderRequest             OrderRequest[]
  maintenanceRequests      MaintenanceRequest[]

  @@map("properties")
}

model MaintenanceRequest {
  maintenanceRequestId String                         @id @default(uuid())
  propertyId           String
  property             Property                       @relation(fields: [propertyId], references: [propertyId])
  tenantId             String
  tenant               Tenant                         @relation(fields: [tenantId], references: [tenantId])
  ownerId              String
  owner                PropertyOwner                  @relation(fields: [ownerId], references: [propertyOwnerId])
  createdAt            DateTime                       @default(now())
  updatedAt            DateTime                       @updatedAt
  // 
  isAnimal             Boolean?
  animalDetails        String?
  // 
  issueLocation        String
  priority             RequestMaintenancePriorityEnum
  issueType            ServiceType
  description          String
  images               String[]
  status               MaintenanceRequestStatus       @default(PENDING)
  // 
  serviceProviderId    String?                        @unique
  serviceProvides      ServiceProvider?               @relation(fields: [serviceProviderId], references: [serviceProviderId])

  @@map("maintenance_requests")
}

// ! not needed , will be deleted
model OrderRequest {
  pendingOrderId String   @id @default(uuid())
  propertyId     String
  property       Property @relation(fields: [propertyId], references: [propertyId])
  isApproved     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("order_requests")
}

model Service {
  serviceId                 String                   @id @default(uuid())
  minPrice                  Float?
  maxPrice                  Float?
  serviceDescription        String?
  serviceLocation           String?
  serviceCancellationPolicy String?
  serviceAvailability       ServiceAvailabilityEnum?
  serviceType               ServiceType?
  ownerId                   String?                  @unique
  owner                     ServiceProvider?         @relation(fields: [ownerId], references: [serviceProviderId])
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt

  @@map("Services")
}

model SavedItem {
  itemId            String           @id @default(uuid())
  itemType          ItemType
  serviceProviderId String?
  serviceProvider   ServiceProvider? @relation(fields: [serviceProviderId], references: [serviceProviderId])
  tenantId          String?
  tenant            Tenant?          @relation(fields: [tenantId], references: [tenantId])
  propertyId        String?
  property          Property?        @relation(fields: [propertyId], references: [propertyId])
  userId            String
  user              User             @relation(fields: [userId], references: [userId])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

// enums
enum UserStatus {
  ACTIVE
  PAUSED
  SUSPENDED
}

enum MaintenanceRequestStatus {
  PENDING
  APPROVED
  ACTIVE
  PAUSED
  CANCEL
  COMPLETED
}

enum ServiceType {
  TENANT_SCREENING
  MAINTENANCE_AND_REPAIR
  CLEANING
  PEST_CONTROL
  LAWN_CARE
  SECURITY_AND_SAFETY
  INSURANCE
  INSPECTION
  MARKETING
  TECHNOLOGY
}

enum ServiceAvailabilityEnum {
  LOW_PRIORITY
  MEDIUM_PRIORITY
  HIGH_PRIORITY
  ALL_PRIORITIES
}

enum UserRoles {
  SUPERADMIN
  TENANT
  PROPERTY_OWNER
  SERVICE_PROVIDER
}

enum ItemType {
  PROPERTY
  PROPERTY_OWNER
  SERVICE
  TENANT
}

enum RequestMaintenancePriorityEnum {
  LOW_PRIORITY
  MEDIUM_PRIORITY
  HIGH_PRIORITY
}
