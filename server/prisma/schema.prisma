generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma schema

model User {
  userId          String           @id @default(uuid()) // Change uuid() to auto() for the primary key
  email           String           @unique
  userName        String           @unique
  password        String
  userStatus      UserStatus       @default(ACTIVE)
  createdAt       DateTime         @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(0)
  role            UserRoles
  tenant          Tenant?
  propertyOwner   PropertyOwner?
  serviceProvider ServiceProvider?

  @@map("users")
}

model Tenant {
  tenantId                  String   @id @default(uuid()) // Change uuid() to auto() for the primary key
  userId                    String   @unique
  firstName                 String
  lastName                  String
  // dateOfBirth             DateTime?
  socialSecurityNumber      String?
  drivingLicenseNumber      String?
  presentAddress            String?
  isCriminalRecord          Boolean?
  criminalRecordDescription String?
  CurrentEmployer           String?
  EmployerContactInfo       String?
  JobTitle                  String?
  AnnualSalary              Int?
  OtherIncomeSource         String?
  CurrentCreditScore        Int?
  isSmoker                  Boolean?
  allergies                 String?
  isHaveOtherMember         Boolean?
  numberOfMember            Int?
  isPets                    Boolean?
  typeOfPets                String?
  isPetVacinated            Boolean?
  isAgree                   Boolean?
  comment                   String?
  prevLandlordName          String?
  prevLandlordContactInfo   String?
  lengthOfPrevTenancy       String?
  affordableRentAmount      Int?
  leavingReason             String?
  isLatePaid                Boolean?
  createdAt                 DateTime @default(now()) @db.Timestamptz(0)
  updatedAt                 DateTime @updatedAt @db.Timestamptz(0)
  user                      User     @relation(fields: [userId], references: [userId])

  @@map("tenants")
}

model PropertyOwner {
  propertyOwnerId String     @id @default(uuid()) // Change uuid() to auto() for the primary key
  firstName       String
  lastName        String
  phoneNumber     String?
  createdAt       DateTime   @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime   @updatedAt @db.Timestamptz(0)
  userId          String     @unique
  user            User       @relation(fields: [userId], references: [userId])
  Property        Property[]

  @@map("propertyOwners")
}

model ServiceProvider {
  serviceProviderId String   @id @default(uuid()) // Change uuid() to auto() for the primary key
  firstName         String
  lastName          String
  userId            String   @unique
  createdAt         DateTime @default(now()) @db.Timestamptz(0)
  updatedAt         DateTime @updatedAt @db.Timestamptz(0)
  user              User     @relation(fields: [userId], references: [userId])

  @@map("serviceProviders")
}

enum UserStatus {
  ACTIVE
  PAUSED
  SUSPENDED
}

enum UserRoles {
  SUPERADMIN
  TENANT
  PROPERTY_OWNER
  SERVICE_PROVIDER
}

//  profileId  String?    @unique
//   profile    Profile?   @relation(fields: [profileId], references: [profileId])

// model Profile {
//   profileId       String        @id @default(auto()) // Change uuid() to auto() for the primary key
//   firstName       String
//   lastName        String
//   profileImage    String?
//   createdAt       DateTime      @default(now()) @db.Timestamptz(0)
//   updatedAt       DateTime      @updatedAt @db.Timestamptz(0)
//   userId          String        @unique // Add this field to associate a profile with a user
//   user            User          @relation(fields: [userId], references: [userId])
//   tenantId        String
//   tenant          Tenant?       @relation(fields: [tenantId], references: [tenantId])
//   propertyOwnerId   String
//   propertyOwner   PropertyOwner? @relation(fields: [propertyOwnerId], references: [propertyOwnerId])
//   serviceProviderUserId String
//   serviceProvider ServiceProvider? @relation(fields: [serviceProviderId], references: [serviceProviderId])

//   @@map("profiles")
// }

model Property {
  propertyId               String        @id @default(uuid())
  owner                    PropertyOwner @relation(fields: [ownerId], references: [propertyOwnerId])
  ownerId                  String
  numOfBed                 Int           @default(1)
  numOfBath                Int           @default(1)
  address                  String
  description              String
  maintenanceCoveredTenant String
  maintenanceCoveredOwner  String
  schools                  String
  universities             String
  allowedPets              String
  images                   String[]
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
}
